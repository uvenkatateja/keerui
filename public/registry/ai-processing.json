{
  "name": "ai-processing",
  "type": "registry:ui",
  "files": [
    {
      "path": "components/keerui/ai-processing.tsx",
      "content": "\"use client\";\n\nimport React, { useState, useEffect } from \"react\";\nimport { motion } from \"motion/react\";\nimport { useTheme } from \"next-themes\";\n\ninterface Node {\n  id: number;\n  x: number;\n  y: number;\n  layer: number;\n  active: boolean;\n}\n\ninterface Connection {\n  from: Node;\n  to: Node;\n  active: boolean;\n}\n\nconst layers = [\n  { nodes: 4, x: 80 },\n  { nodes: 6, x: 200 },\n  { nodes: 4, x: 320 }\n];\n\nconst generateNodes = (): Node[] => {\n  let nodeId = 0;\n  return layers.flatMap((layer, layerIndex) =>\n    Array.from({ length: layer.nodes }, (_, i) => ({\n      id: nodeId++,\n      x: layer.x,\n      y: 60 + (i * 40) + (layerIndex === 1 ? -20 : 0),\n      layer: layerIndex,\n      active: false\n    }))\n  );\n};\n\nexport default function AIProcessing() {\n  const { resolvedTheme } = useTheme();\n  const [mounted, setMounted] = useState(false);\n  const [nodes, setNodes] = useState<Node[]>(() => generateNodes());\n  const [processingWave, setProcessingWave] = useState(0);\n\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setProcessingWave(prev => (prev + 1) % 3);\n      \n      setNodes(prevNodes => \n        prevNodes.map(node => ({\n          ...node,\n          active: Math.random() > 0.6 && node.layer <= processingWave\n        }))\n      );\n    }, 1500);\n\n    return () => clearInterval(interval);\n  }, [processingWave]);\n\n  const connections = React.useMemo(() => {\n    const conns: Connection[] = [];\n    for (let i = 0; i < layers.length - 1; i++) {\n      const currentLayer = nodes.filter(n => n.layer === i);\n      const nextLayer = nodes.filter(n => n.layer === i + 1);\n      \n      currentLayer.forEach(from => {\n        nextLayer.forEach(to => {\n          conns.push({ from, to, active: from.active && to.active });\n        });\n      });\n    }\n    return conns;\n  }, [nodes]);\n\n  const isDark = mounted ? (resolvedTheme === 'dark') : true;\n\n  return (\n    <div className={`relative h-[20rem] w-full max-w-[400px] rounded-md border overflow-hidden ${\n      isDark ? 'border-neutral-800 bg-neutral-950' : 'border-gray-200 bg-white'\n    }`}>\n      <svg className=\"absolute inset-0 w-full h-full\">\n        {connections.map((conn, i) => (\n          <motion.line\n            key={i}\n            x1={conn.from.x}\n            y1={conn.from.y}\n            x2={conn.to.x}\n            y2={conn.to.y}\n            stroke={conn.active ? \"#06b6d4\" : (isDark ? \"#404040\" : \"#d1d5db\")}\n            strokeWidth={conn.active ? 2 : 1}\n            opacity={conn.active ? 0.8 : 0.3}\n            animate={{\n              opacity: conn.active ? [0.3, 0.8, 0.3] : 0.3\n            }}\n            transition={{ duration: 0.8, ease: \"easeInOut\" }}\n          />\n        ))}\n      </svg>\n\n      {nodes.map(node => (\n        <motion.div\n          key={node.id}\n          className=\"absolute w-3 h-3 rounded-full border-2\"\n          style={{ left: node.x - 6, top: node.y - 6 }}\n          animate={{\n            backgroundColor: node.active ? \"#06b6d4\" : (isDark ? \"#404040\" : \"#9ca3af\"),\n            borderColor: node.active ? \"#22d3ee\" : (isDark ? \"#525252\" : \"#6b7280\"),\n            scale: node.active ? [1, 1.3, 1] : 1,\n            boxShadow: node.active \n              ? \"0 0 15px rgba(6, 182, 212, 0.6)\" \n              : \"0 0 0px rgba(6, 182, 212, 0)\"\n          }}\n          transition={{ duration: 0.6, ease: \"easeInOut\" }}\n        />\n      ))}\n\n      <motion.div\n        className={`absolute top-4 left-4 text-xs ${isDark ? 'text-neutral-400' : 'text-gray-600'}`}\n        animate={{ opacity: [0.5, 1, 0.5] }}\n        transition={{ duration: 2, repeat: Infinity }}\n      >\n        Processing...\n      </motion.div>\n    </div>\n  );\n}",
      "type": "registry:ui",
      "target": "components/keerui/ai-processing.tsx"
    }
  ],
  "author": "venkatateja <hi@venkatateja.dev>",
  "title": "AI Processing"
}