{
    "name": "blockchain-tracker",
    "type": "registry:ui",
    "files": [
        {
            "path": "components/keerui/blockchain-tracker.tsx",
            "content": "\"use client\";\n\nimport React, { useState, useEffect } from \"react\";\nimport { motion } from \"motion/react\";\nimport { useTheme } from \"next-themes\";\n\ninterface Transaction {\n  id: string;\n  from: number;\n  to: number;\n  amount: number;\n  status: \"pending\" | \"confirmed\" | \"failed\";\n  progress: number;\n}\n\ninterface Block {\n  id: number;\n  x: number;\n  y: number;\n  transactions: number;\n  mining: boolean;\n}\n\nconst blocks: Block[] = [\n  { id: 1, x: 100, y: 120, transactions: 0, mining: false },\n  { id: 2, x: 250, y: 80, transactions: 0, mining: false },\n  { id: 3, x: 400, y: 120, transactions: 0, mining: false },\n  { id: 4, x: 250, y: 200, transactions: 0, mining: false },\n];\n\nexport default function BlockchainTracker() {\n  const { resolvedTheme } = useTheme();\n  const [mounted, setMounted] = useState(false);\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\n  const [activeBlocks, setActiveBlocks] = useState<number[]>([]);\n\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      // Create new transaction\n      const fromBlock = Math.floor(Math.random() * blocks.length);\n      let toBlock = Math.floor(Math.random() * blocks.length);\n      while (toBlock === fromBlock) {\n        toBlock = Math.floor(Math.random() * blocks.length);\n      }\n\n      const newTransaction: Transaction = {\n        id: Math.random().toString(36).substr(2, 9),\n        from: fromBlock,\n        to: toBlock,\n        amount: Math.floor(Math.random() * 100) + 1,\n        status: \"pending\",\n        progress: 0,\n      };\n\n      setTransactions(prev => [...prev.slice(-2), newTransaction]);\n      setActiveBlocks([fromBlock, toBlock]);\n\n      // Animate transaction progress\n      let progress = 0;\n      const progressInterval = setInterval(() => {\n        progress += 2;\n        setTransactions(prev =>\n          prev.map(tx =>\n            tx.id === newTransaction.id\n              ? { ...tx, progress, status: progress >= 100 ? \"confirmed\" : \"pending\" }\n              : tx\n          )\n        );\n\n        if (progress >= 100) {\n          clearInterval(progressInterval);\n          setTimeout(() => {\n            setTransactions(prev => prev.filter(tx => tx.id !== newTransaction.id));\n          }, 1000);\n        }\n      }, 50);\n    }, 3000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const isDark = mounted ? (resolvedTheme === 'dark') : true;\n\n  return (\n    <div className={`relative h-[20rem] w-full max-w-[500px] rounded-md border overflow-hidden ${\n      isDark ? 'border-neutral-800 bg-neutral-950' : 'border-gray-200 bg-white'\n    }`}>\n      {/* Grid background */}\n      <div className=\"absolute inset-0 opacity-10\">\n        <svg width=\"100%\" height=\"100%\">\n          <defs>\n            <pattern id=\"grid\" width=\"20\" height=\"20\" patternUnits=\"userSpaceOnUse\">\n              <path d=\"M 20 0 L 0 0 0 20\" fill=\"none\" stroke=\"#404040\" strokeWidth=\"1\"/>\n            </pattern>\n          </defs>\n          <rect width=\"100%\" height=\"100%\" fill=\"url(#grid)\" />\n        </svg>\n      </div>\n\n      {/* Connection lines */}\n      <svg className=\"absolute inset-0 w-full h-full\">\n        {blocks.map((from, i) =>\n          blocks.slice(i + 1).map((to, j) => (\n            <line\n              key={`${i}-${j}`}\n              x1={from.x}\n              y1={from.y}\n              x2={to.x}\n              y2={to.y}\n              stroke=\"#404040\"\n              strokeWidth=\"1\"\n              opacity=\"0.3\"\n              strokeDasharray=\"5,5\"\n            />\n          ))\n        )}\n      </svg>\n\n      {/* Transaction flows */}\n      {transactions.map(tx => {\n        const fromBlock = blocks[tx.from];\n        const toBlock = blocks[tx.to];\n        const x = fromBlock.x + (toBlock.x - fromBlock.x) * (tx.progress / 100);\n        const y = fromBlock.y + (toBlock.y - fromBlock.y) * (tx.progress / 100);\n\n        return (\n          <motion.div\n            key={tx.id}\n            className=\"absolute w-2 h-2 rounded-full\"\n            style={{ left: x - 4, top: y - 4 }}\n            initial={{ scale: 0, opacity: 0 }}\n            animate={{\n              scale: 1,\n              opacity: tx.status === \"confirmed\" ? 0 : 1,\n              backgroundColor: tx.status === \"confirmed\" ? \"#10b981\" : \"#06b6d4\",\n              boxShadow: tx.status === \"confirmed\" \n                ? \"0 0 10px rgba(16, 185, 129, 0.6)\" \n                : \"0 0 8px rgba(6, 182, 212, 0.6)\"\n            }}\n            transition={{ duration: 0.3 }}\n          />\n        );\n      })}\n\n      {/* Blockchain nodes */}\n      {blocks.map((block, i) => (\n        <motion.div\n          key={block.id}\n          className=\"absolute flex items-center justify-center\"\n          style={{ left: block.x - 20, top: block.y - 20 }}\n        >\n          <motion.div\n            className=\"w-10 h-10 rounded-lg border-2 flex items-center justify-center text-xs font-bold\"\n            animate={{\n              borderColor: activeBlocks.includes(i) ? \"#06b6d4\" : \"#525252\",\n              backgroundColor: activeBlocks.includes(i) ? \"#0f172a\" : \"#171717\",\n              color: activeBlocks.includes(i) ? \"#06b6d4\" : \"#a3a3a3\",\n              scale: activeBlocks.includes(i) ? 1.1 : 1,\n              boxShadow: activeBlocks.includes(i) \n                ? \"0 0 15px rgba(6, 182, 212, 0.4)\" \n                : \"0 0 0px rgba(6, 182, 212, 0)\"\n            }}\n            transition={{ duration: 0.3 }}\n          >\n            {block.id}\n          </motion.div>\n        </motion.div>\n      ))}\n\n      {/* Status indicator */}\n      <div className=\"absolute top-4 left-4 flex items-center gap-2\">\n        <motion.div\n          className=\"w-2 h-2 rounded-full bg-green-500\"\n          animate={{ opacity: [0.5, 1, 0.5] }}\n          transition={{ duration: 2, repeat: Infinity }}\n        />\n        <span className=\"text-xs text-neutral-400\">Network Active</span>\n      </div>\n\n      {/* Transaction count */}\n      <div className=\"absolute top-4 right-4 text-xs text-neutral-400\">\n        {transactions.length} Active\n      </div>\n    </div>\n  );\n}",
            "type": "registry:ui",
            "target": "components/keerui/blockchain-tracker.tsx"
        }
    ],
    "author": "venkatateja <hi@venkatateja.dev>",
    "title": "Blockchain Tracker"
}