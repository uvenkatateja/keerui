{
  "name": "multi-step-wizard",
  "type": "registry:ui",
  "files": [
    {
      "path": "components/keerui/multi-step-wizard.tsx",
      "content": "\"use client\";\n\nimport React, { useState } from \"react\";\nimport { motion } from \"motion/react\";\nimport { Check, ChevronRight, User, Mail, CreditCard, Shield } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nconst steps = [\n  { id: 1, name: \"Personal\", icon: User },\n  { id: 2, name: \"Account\", icon: Mail },\n  { id: 3, name: \"Payment\", icon: CreditCard },\n  { id: 4, name: \"Security\", icon: Shield },\n];\n\nexport default function MultiStepWizard({ onComplete }: { onComplete?: (data: any) => void }) {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [completedSteps, setCompletedSteps] = useState<number[]>([]);\n  const [formData, setFormData] = useState({\n    name: \"\", email: \"\", username: \"\", password: \"\",\n    card: \"\", expiry: \"\", \"2fa\": false, backup: \"\"\n  });\n\n  const isStepValid = () => {\n    switch (currentStep) {\n      case 1:\n        return formData.name.trim() && formData.email.trim();\n      case 2:\n        return formData.username.trim() && formData.password.trim();\n      case 3:\n        return formData.card.trim() && formData.expiry.trim();\n      case 4:\n        return formData.backup.trim();\n      default:\n        return false;\n    }\n  };\n\n  const handleNext = () => {\n    if (currentStep < steps.length && isStepValid()) {\n      setCompletedSteps([...completedSteps, currentStep]);\n      setCurrentStep(currentStep + 1);\n    } else if (currentStep === steps.length) {\n      onComplete?.(formData);\n    }\n  };\n\n  const handlePrev = () => {\n    if (currentStep > 1) {\n      setCurrentStep(currentStep - 1);\n      setCompletedSteps(completedSteps.filter(step => step < currentStep - 1));\n    }\n  };\n\n  const isCompleted = (stepId: number) => completedSteps.includes(stepId);\n  const isCurrent = (stepId: number) => currentStep === stepId;\n\n  const renderStepContent = () => {\n    const inputClass = \"w-full p-3 text-sm rounded-lg bg-neutral-900/50 border border-neutral-700/50 text-neutral-100 placeholder-neutral-500 focus:border-blue-500/50 focus:outline-none transition-colors\";\n    \n    switch (currentStep) {\n      case 1:\n        return (\n          <>\n            <input\n              placeholder=\"Full Name\"\n              value={formData.name}\n              onChange={(e) => setFormData({...formData, name: e.target.value})}\n              className={inputClass}\n            />\n            <input\n              type=\"email\"\n              placeholder=\"Email Address\"\n              value={formData.email}\n              onChange={(e) => setFormData({...formData, email: e.target.value})}\n              className={inputClass}\n            />\n          </>\n        );\n      case 2:\n        return (\n          <>\n            <input\n              placeholder=\"Username\"\n              value={formData.username}\n              onChange={(e) => setFormData({...formData, username: e.target.value})}\n              className={inputClass}\n            />\n            <input\n              type=\"password\"\n              placeholder=\"Password\"\n              value={formData.password}\n              onChange={(e) => setFormData({...formData, password: e.target.value})}\n              className={inputClass}\n            />\n          </>\n        );\n      case 3:\n        return (\n          <>\n            <input\n              placeholder=\"Card Number\"\n              value={formData.card}\n              onChange={(e) => setFormData({...formData, card: e.target.value})}\n              className={inputClass}\n            />\n            <input\n              placeholder=\"Expiry Date\"\n              value={formData.expiry}\n              onChange={(e) => setFormData({...formData, expiry: e.target.value})}\n              className={inputClass}\n            />\n          </>\n        );\n      case 4:\n        return (\n          <>\n            <label className=\"flex items-center gap-3 p-3 rounded-lg bg-neutral-900/30 border border-neutral-700/30 cursor-pointer hover:bg-neutral-900/50 transition-colors\">\n              <input\n                type=\"checkbox\"\n                checked={formData[\"2fa\"]}\n                onChange={(e) => setFormData({...formData, \"2fa\": e.target.checked})}\n                className=\"w-4 h-4 text-blue-600 rounded border-neutral-600 bg-neutral-800\"\n              />\n              <span className=\"text-sm text-neutral-300\">Enable Two-Factor Authentication</span>\n            </label>\n            <input\n              placeholder=\"Recovery Email\"\n              value={formData.backup}\n              onChange={(e) => setFormData({...formData, backup: e.target.value})}\n              className={inputClass}\n            />\n          </>\n        );\n    }\n  };\n\n  return (\n    <article className=\"relative w-full max-w-md mx-auto bg-neutral-950 rounded-xl border border-neutral-800/60 overflow-hidden shadow-2xl\">\n      <motion.div \n        initial={{ opacity: 0, y: 20 }} \n        animate={{ opacity: 1, y: 0 }}\n        className=\"flex flex-col h-[32rem]\"\n      >\n        {/* Progress Header */}\n        <header className=\"p-6 border-b border-neutral-800/60 bg-gradient-to-r from-neutral-950 to-neutral-900\">\n          <nav className=\"flex items-center justify-between mb-4\" aria-label=\"Form progress\">\n            {steps.map((step, index) => {\n              const Icon = step.icon;\n              return (\n                <React.Fragment key={step.id}>\n                  <motion.div\n                    initial={{ scale: 0.8 }}\n                    animate={{ scale: isCurrent(step.id) ? 1.1 : 1 }}\n                    className={cn(\n                      \"relative w-10 h-10 rounded-full flex items-center justify-center font-medium transition-all duration-300\",\n                      isCompleted(step.id) \n                        ? \"bg-emerald-600 text-white shadow-lg shadow-emerald-600/25\" \n                        : isCurrent(step.id) \n                        ? \"bg-blue-600 text-white shadow-lg shadow-blue-600/25\" \n                        : \"bg-neutral-800 text-neutral-500\"\n                    )}\n                    aria-current={isCurrent(step.id) ? \"step\" : undefined}\n                  >\n                    {isCompleted(step.id) ? <Check className=\"w-5 h-5\" /> : <Icon className=\"w-5 h-5\" />}\n                  </motion.div>\n                  {index < steps.length - 1 && (\n                    <div className={cn(\n                      \"flex-1 h-0.5 mx-2 transition-colors duration-300\",\n                      isCompleted(step.id) ? \"bg-emerald-600\" : \"bg-neutral-800\"\n                    )} />\n                  )}\n                </React.Fragment>\n              );\n            })}\n          </nav>\n          <p className=\"text-sm text-neutral-400\">\n            Step {currentStep} of {steps.length}: {steps[currentStep - 1].name}\n          </p>\n        </header>\n\n        {/* Form Content */}\n        <main className=\"flex-1 p-6\">\n          <motion.form\n            key={currentStep}\n            initial={{ opacity: 0, x: 20 }}\n            animate={{ opacity: 1, x: 0 }}\n            className=\"space-y-4 h-full flex flex-col justify-center\"\n          >\n            {renderStepContent()}\n          </motion.form>\n        </main>\n\n        {/* Navigation */}\n        <footer className=\"p-6 border-t border-neutral-800/60 bg-neutral-950/80 backdrop-blur-sm\">\n          <nav className=\"flex justify-between items-center\">\n            <motion.button\n              type=\"button\"\n              whileHover={{ scale: 1.02 }}\n              whileTap={{ scale: 0.98 }}\n              onClick={handlePrev}\n              disabled={currentStep === 1}\n              className=\"px-4 py-2 text-sm font-medium text-neutral-400 border border-neutral-700 rounded-lg hover:bg-neutral-800 hover:text-neutral-300 disabled:opacity-50 disabled:cursor-not-allowed transition-all\"\n            >\n              Previous\n            </motion.button>\n            <motion.button\n              type=\"button\"\n              whileHover={{ scale: 1.02 }}\n              whileTap={{ scale: 0.98 }}\n              onClick={handleNext}\n              disabled={!isStepValid()}\n              className={`flex items-center gap-2 px-6 py-2 text-sm font-medium rounded-lg shadow-lg transition-all ${\n                isStepValid() \n                  ? \"text-white bg-blue-600 hover:bg-blue-700 shadow-blue-600/25\" \n                  : \"text-neutral-500 bg-neutral-800 cursor-not-allowed shadow-neutral-800/25\"\n              }`}\n            >\n              {currentStep === steps.length ? \"Complete\" : \"Next\"}\n              <ChevronRight className=\"w-4 h-4\" />\n            </motion.button>\n          </nav>\n        </footer>\n      </motion.div>\n    </article>\n  );\n}",
      "type": "registry:ui",
      "target": "components/keerui/multi-step-wizard.tsx"
    }
  ],
  "author": "Venkatateja <hi@venkatateja.dev>",
  "title": "Multi Step Wizard"
}
